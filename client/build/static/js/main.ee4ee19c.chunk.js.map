{"version":3,"sources":["utils/auth.js","utils/mutations.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","components/Footer.js","pages/Home.js","pages/LandingPage.js","components/StateParkInfo.js","utils/queries.js","pages/State.js","pages/Portfolio.js","pages/Contact.js","components/VisitedParksList.js","pages/Visited.js","App.js","serviceWorker.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","LOGIN_USER","gql","ADD_USER","SAVE_VISITED","SignupForm","useState","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","useMutation","addUser","handleInputChange","error","event","target","name","value","handleFormSubmit","a","preventDefault","currentTarget","checkValidity","stopPropagation","variables","data","Auth","login","console","Form","noValidate","onSubmit","Alert","dismissible","onClose","show","variant","Group","Label","htmlFor","Control","type","placeholder","onChange","required","Feedback","Button","disabled","LoginForm","loginUser","id","src","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Container","fluid","Brand","as","Link","to","style","height","width","Toggle","Collapse","justifyContent","Nav","className","loggedIn","getProfile","onClick","logout","Modal","size","onHide","Tab","defaultActiveKey","Header","closeButton","Title","Item","eventKey","Body","Content","Pane","handleModalClose","Footer","href","Home","customize","clickHandler","log","dataset","LandingPage","StateParkInfo","parkData","saveVisited","handleAddVisitedTrip","parkId","response","Error","undefined","fullName","designation","description","phoneNumber","address","url","activities","map","activity","entranceFees","fee","cost","GET_ME","require","config","State","zoomLevel","park","setPark","state","useParams","useEffect","getParksData","parksDataArr","setParksDataArr","stateCode","npsRequestURL","process","fetch","then","ok","tempArr","json","results","i","length","parksData","latitude","longitude","contacts","phoneNumbers","addresses","line1","line2","line3","city","postalCode","entrancePasses","images","push","statusText","useQuery","loading","userData","errors","me","bootstrapURLKeys","key","defaultCenter","WI","WV","VT","TX","SD","RI","OR","NY","NH","NE","KS","MS","IL","DE","CT","AR","IN","MO","FL","NV","ME","MI","GA","HI","AK","TN","VA","NJ","KY","ND","MN","OK","MT","WA","UT","CO","OH","AL","IA","NM","SC","PA","AZ","MD","MA","CA","ID","WY","NC","LA","defaultZoom","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","maps","marker","Marker","position","lat","Number","lng","title","icon","addListener","renderMarkers","PortfolioPage","ContactPage","faEnvelope","faLinkedin","faGithub","VisitedParksList","Visited","visitedParksData","visitedParkData","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","Portfolio","Contact","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"8YA4Ce,M,0FAzCb,WACE,OAAOA,IAAOC,KAAKC,c,sBAGrB,WAEE,IAAMC,EAAQF,KAAKC,WACnB,QAASC,IAAUF,KAAKG,eAAeD,K,4BAGzC,SAAeA,GACb,IAEE,OADgBH,IAAOG,GACXE,IAAMC,KAAKC,MAAQ,IAG/B,MAAOC,GACP,OAAO,K,sBAIX,WAEE,OAAOC,aAAaC,QAAQ,c,mBAG9B,SAAMC,GAEJF,aAAaG,QAAQ,WAAYD,GAEjCE,OAAOC,SAASC,OAAO,W,oBAGzB,WAEEN,aAAaO,WAAW,YAExBH,OAAOC,SAASC,OAAO,S,uBCtCdE,EAAaC,YAAH,qNAYVC,EAAWD,YAAH,kQAqCRE,GAzBmBF,YAAH,mcAyBDA,YAAH,oI,OC2DVG,EAtGI,WAEf,MAAwCC,mBAAS,CAAEC,SAAU,GAAIC,MAAO,GAAIC,SAAU,KAAtF,mBAAOC,EAAP,KAAqBC,EAArB,KAEA,EAAoBL,oBAAS,GAAtBM,EAAP,oBAEA,EAAkCN,oBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KAEA,EAA6BC,YAAYZ,GAAzC,mBAAOa,EAAP,KAEMC,GAFN,KAAkBC,MAEQ,SAACC,GACvB,MAAwBA,EAAMC,OAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACdX,EAAgB,2BAAKD,GAAN,kBAAqBW,EAAOC,OAGzCC,EAAgB,uCAAG,WAAOJ,GAAP,iBAAAK,EAAA,6DACrBL,EAAMM,kBAIuB,IADhBN,EAAMO,cACVC,kBACLR,EAAMM,iBACNN,EAAMS,mBAPW,kBAWMZ,EAAQ,CAC3Ba,UAAU,eAAMnB,KAZH,gBAWToB,EAXS,EAWTA,KAIRC,EAAKC,MAAMF,EAAKd,QAAQ7B,OAfP,kDAkBjB8C,QAAQf,MAAR,MACAJ,GAAa,GAnBI,QAsBrBH,EAAgB,CACZJ,SAAU,GACVC,MAAO,GACPC,SAAU,KAzBO,0DAAH,sDA6BtB,OACI,mCAEI,eAACyB,EAAA,EAAD,CAAMC,YAAU,EAACvB,UAAWA,EAAWwB,SAAUb,EAAjD,UAEI,cAACc,EAAA,EAAD,CAAOC,aAAW,EAACC,QAAS,kBAAMzB,GAAa,IAAQ0B,KAAM3B,EAAW4B,QAAQ,SAAhF,oDAIA,eAACP,EAAA,EAAKQ,MAAN,WACI,cAACR,EAAA,EAAKS,MAAN,CAAYC,QAAQ,WAApB,sBACA,cAACV,EAAA,EAAKW,QAAN,CACIC,KAAK,OACLC,YAAY,gBACZ1B,KAAK,WACL2B,SAAU/B,EACVK,MAAOZ,EAAaH,SACpB0C,UAAQ,IAEZ,cAACf,EAAA,EAAKW,QAAQK,SAAd,CAAuBJ,KAAK,UAA5B,sCAGJ,eAACZ,EAAA,EAAKQ,MAAN,WACI,cAACR,EAAA,EAAKS,MAAN,CAAYC,QAAQ,QAApB,mBACA,cAACV,EAAA,EAAKW,QAAN,CACIC,KAAK,QACLC,YAAY,qBACZ1B,KAAK,QACL2B,SAAU/B,EACVK,MAAOZ,EAAaF,MACpByC,UAAQ,IAEZ,cAACf,EAAA,EAAKW,QAAQK,SAAd,CAAuBJ,KAAK,UAA5B,mCAGJ,eAACZ,EAAA,EAAKQ,MAAN,WACI,cAACR,EAAA,EAAKS,MAAN,CAAYC,QAAQ,WAApB,sBACA,cAACV,EAAA,EAAKW,QAAN,CACIC,KAAK,WACLC,YAAY,gBACZ1B,KAAK,WACL2B,SAAU/B,EACVK,MAAOZ,EAAaD,SACpBwC,UAAQ,IAEZ,cAACf,EAAA,EAAKW,QAAQK,SAAd,CAAuBJ,KAAK,UAA5B,sCAEJ,cAACK,EAAA,EAAD,CACIC,WAAY1C,EAAaH,UAAYG,EAAaF,OAASE,EAAaD,UACxEqC,KAAK,SACLL,QAAQ,UAHZ,0BCLDY,EAnFG,WACd,MAAwC/C,mBAAS,CAAEE,MAAO,GAAIC,SAAU,KAAxE,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAoBL,oBAAS,GAAtBM,EAAP,oBACA,EAAkCN,oBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KAEA,EAA+BC,YAAYd,GAA3C,mBAAOqD,EAAP,KAEMrC,GAFN,KAAoBC,MAEM,SAACC,GACvB,MAAwBA,EAAMC,OAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACdX,EAAgB,2BAAKD,GAAN,kBAAqBW,EAAOC,OAGzCC,EAAgB,uCAAG,WAAOJ,GAAP,iBAAAK,EAAA,6DACrBL,EAAMM,kBAIuB,IADhBN,EAAMO,cACVC,kBACLR,EAAMM,iBACNN,EAAMS,mBAPW,kBAWM0B,EAAU,CAC7BzB,UAAU,eAAMnB,KAZH,gBAWToB,EAXS,EAWTA,KAIRC,EAAKC,MAAMF,EAAKE,MAAM7C,OAfL,kDAkBjB8C,QAAQf,MAAR,MACAJ,GAAa,GAnBI,QAsBrBH,EAAgB,CACZJ,SAAU,GACVC,MAAO,GACPC,SAAU,KAzBO,0DAAH,sDA6BtB,OACI,qCAAE,qBAAK8C,GAAG,YAAYC,IAAM,oCACxB,eAACtB,EAAA,EAAD,CAAMC,YAAU,EAACvB,UAAWA,EAAWwB,SAAUb,EAAjD,UACI,cAACc,EAAA,EAAD,CAAOC,aAAW,EAACC,QAAS,kBAAMzB,GAAa,IAAQ0B,KAAM3B,EAAW4B,QAAQ,SAAhF,+DAGA,eAACP,EAAA,EAAKQ,MAAN,WACI,cAACR,EAAA,EAAKS,MAAN,CAAYC,QAAQ,QAApB,mBACA,cAACV,EAAA,EAAKW,QAAN,CACIC,KAAK,OACLC,YAAY,aACZ1B,KAAK,QACL2B,SAAU/B,EACVK,MAAOZ,EAAaF,MACpByC,UAAQ,IAEZ,cAACf,EAAA,EAAKW,QAAQK,SAAd,CAAuBJ,KAAK,UAA5B,mCAGJ,eAACZ,EAAA,EAAKQ,MAAN,WACI,cAACR,EAAA,EAAKS,MAAN,CAAYC,QAAQ,WAApB,sBACA,cAACV,EAAA,EAAKW,QAAN,CACIC,KAAK,WACLC,YAAY,gBACZ1B,KAAK,WACL2B,SAAU/B,EACVK,MAAOZ,EAAaD,SACpBwC,UAAQ,IAEZ,cAACf,EAAA,EAAKW,QAAQK,SAAd,CAAuBJ,KAAK,UAA5B,sCAEJ,cAACK,EAAA,EAAD,CACIC,WAAY1C,EAAaF,OAASE,EAAaD,UAC/CqC,KAAK,SACLL,QAAQ,UAHZ,2BCADgB,EA1EG,WACd,MAAkCnD,oBAAS,GAA3C,mBAAOoD,EAAP,KAAkBC,EAAlB,KAEA,OACI,qCACI,cAACC,EAAA,EAAD,CAAQL,GAAG,oBAAoBM,GAAG,OAAOpB,QAAQ,OAAOqB,OAAO,KAA/D,SACI,eAACC,EAAA,EAAD,CAAWC,OAAK,EAAhB,UACI,cAACJ,EAAA,EAAOK,MAAR,CAAcC,GAAIC,IAAMC,GAAG,IAA3B,SACA,qBAAKZ,IAAM,kCAAiCa,MAAO,CAAEC,OAAQ,QAASC,MAAO,YAE7E,cAACX,EAAA,EAAOY,OAAR,CAAe,gBAAc,WAC7B,cAACZ,EAAA,EAAOa,SAAR,CAAiBlB,GAAG,SAAQc,MAAO,CAACK,eAAgB,YAApD,SACI,cAACC,EAAA,EAAD,CAAKC,UAAU,UAAf,SAEK7C,EAAK8C,WACF,qCACI,+CAAkB9C,EAAK+C,aAAahD,KAAKvB,SAAzC,OAEA,cAACoE,EAAA,EAAIR,KAAL,CAAUS,UAAU,qCAAqCV,GAAIC,IAAMC,GAAG,WAAtE,0BAGA,cAACO,EAAA,EAAIR,KAAL,CAAUS,UAAU,qCAAqCV,GAAIC,IAAMC,GAAG,QAAtE,oBAGA,wBAAQQ,UAAU,qCAAqCG,QAAShD,EAAKiD,OAArE,uBAKJ,mCACI,cAACL,EAAA,EAAIR,KAAL,CAAUS,UAAU,qCAAqCG,QAAS,kBAAMpB,GAAa,IAArF,sCASxB,cAACsB,EAAA,EAAD,CACIC,KAAK,KACL1C,KAAMkB,EACNyB,OAAQ,kBAAMxB,GAAa,IAC3B,kBAAgB,eAJpB,SAMI,eAACyB,EAAA,EAAIrB,UAAL,CAAesB,iBAAiB,QAAhC,UACI,cAACJ,EAAA,EAAMK,OAAP,CAAcC,aAAW,EAAzB,SACI,cAACN,EAAA,EAAMO,MAAP,CAAajC,GAAG,eAAhB,SACI,eAACoB,EAAA,EAAD,CAAKlC,QAAQ,QAAb,UACI,cAACkC,EAAA,EAAIc,KAAL,UACI,cAACd,EAAA,EAAIR,KAAL,CAAUuB,SAAS,QAAnB,qBAEJ,cAACf,EAAA,EAAIc,KAAL,UACI,cAACd,EAAA,EAAIR,KAAL,CAAUuB,SAAS,SAAnB,8BAKhB,cAACT,EAAA,EAAMU,KAAP,UACI,eAACP,EAAA,EAAIQ,QAAL,WACI,cAACR,EAAA,EAAIS,KAAL,CAAUH,SAAS,QAAnB,SACI,cAAC,EAAD,CAAWI,iBAAkB,kBAAMnC,GAAa,QAEpD,cAACyB,EAAA,EAAIS,KAAL,CAAUH,SAAS,SAAnB,SACI,cAAC,EAAD,CAAYI,iBAAkB,kBAAMnC,GAAa,sBCvDlEoC,I,EAAAA,EAdf,WACA,OACI,wBAAQnB,UAAU,uBAAlB,SACI,qBAAKA,UAAU,YAAf,SACI,oBAAGA,UAAU,6BAAb,UACA,cAAC,IAAD,CAAMA,UAAU,qCAAoCR,GAAG,aAAvD,SAAoE,qBAAKQ,UAAU,aAAapB,IAAM,sCACtG,cAAC,IAAD,CAAMoB,UAAU,qCAAqCR,GAAG,WAAxD,SAAmE,qBAAKQ,UAAU,aAAapB,IAAM,sCACrG,mBAAGoB,UAAU,qCAAqCoB,KAAK,6DAAvD,SAAoH,qBAAKpB,UAAU,aAAapB,IAAM,8C,kBC6BnJyC,EAjCF,WA0BT,OACI,qBAAK1C,GAAG,OAAOqB,UAAU,UAAzB,SACI,cAAC,IAAD,CAAQsB,UAZL,CACH,GAAM,CACFC,aAAc,SAAChF,GAAD,OAAWc,QAAQmE,IAAI,wBAAyBjF,EAAMC,OAAOiF,WAG/E,GAAM,IAOmCtB,QAlB9B,SAAC5D,GAChBtB,OAAOC,SAASC,OAAhB,iBAAiCoB,EAAMC,OAAOiF,QAAQhF,aCQ/CiF,EArBK,WAClB,OACI,qCACA,qBAAK1B,UAAU,YACb,wBAAQrB,GAAG,iBAAX,SAEA,sBAAKqB,UAAU,YAAf,UACE,cAACD,EAAA,EAAIR,KAAL,CAAUD,GAAIC,IAAMC,GAAG,QAAvB,SACE,qBACAZ,IAAI,kCAAkCoB,UAAU,qBAEhD,wD,mBCkFG2B,GA3FO,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAEvB,EAAiCzF,aAAYX,GAA7C,mBAAOqG,EAAP,KACA,GADA,KAAsBvF,MACYZ,oBAAS,IAA3C,mBAAOoD,EAAP,KAAkBC,EAAlB,KAOM+C,EAAoB,uCAAG,WAAOF,GAAP,eAAAhF,EAAA,yDAC3BS,QAAQmE,IAAII,GAEZ7C,GAAa,GAEC5B,EAAK8C,WAAa9C,EAAK7C,WAAa,KALvB,0CAOlB,GAPkB,gCAWFuH,EAAY,CACjC5E,UAAW,CAAE8E,OAAQH,EAASG,UAZP,UAWnBC,EAXmB,OAczB3E,QAAQmE,IAAIQ,GAEPA,EAhBoB,uBAiBjB,IAAIC,MAAM,wBAjBO,0DAoBzB5E,QAAQf,MAAR,MApByB,0DAAH,sDAyB1B,OACE,sBAAK0D,UAAU,aAAf,eACyBkC,IAAtBN,EAASO,SACR,qCACE,6BAAKP,EAASO,WACd,4BAAIP,EAASQ,cACb,4BAAIR,EAASS,cACb,oBAAGjB,KAAI,cAASQ,EAASU,aAAzB,2BACiBV,EAASU,eAE1B,4BAAIV,EAASW,UACb,mBAAGnB,KAAMQ,EAASY,IAAlB,6CACA,4CACA,6BACGZ,EAASa,WAAWC,KAAI,SAACC,GACxB,OAAO,mCAAwBA,EAASlG,KAAjC,MAASkG,EAAShE,SAG7B,8CACA,6BACGiD,EAASgB,aAAaF,KAAI,SAACG,GAC1B,OACE,mCACIA,EAAIC,KADR,MACiBD,EAAIR,YAAa,MADzBQ,EAAIR,kBAMnB,yBAAQlC,QAAS,kBAAM2B,EAAqBF,IAAW5B,UAAU,GAAjE,UACG,IADH,4BAE4B,OAE5B,qBAAKP,MAAO,CAAEC,OAAQ,SAGxB,mCACE,+DAGJ,eAACW,EAAA,EAAD,CAAOC,KAAK,KAAK1C,KAAMkB,EAAWyB,OAAQ,kBAAMxB,GAAa,IAA7D,UACE,cAACsB,EAAA,EAAMK,OAAP,CAAcC,aAAW,EAAzB,SACE,cAACN,EAAA,EAAMO,MAAP,sCAEF,cAACP,EAAA,EAAMU,KAAP,UACE,8EAEF,cAACV,EAAA,EAAMc,OAAP,UACE,cAAC5C,EAAA,EAAD,CAAQV,QAAQ,UAAUsC,QA3Ed,kBAAMpB,GAAa,IA2E/B,yB,UCtFGgE,GAASzH,YAAH,wMCInB0H,EAAQ,KAAUC,SAKlB,IA+KeC,GA/KD,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACf,EAAwBzH,mBAAS,IAAjC,mBAAO0H,EAAP,KAAaC,EAAb,KACQC,EAAUC,cAAVD,MAERE,qBAAU,WACRC,EAAaH,KACZ,CAACA,IAEJ,MAAwC5H,mBAAS,IAAjD,mBAAOgI,EAAP,KAAqBC,EAArB,KAuDMF,EAAe,SAACG,GACpB,IAAMC,EAAa,2DAAuDD,EAAvD,oBAA4EE,4CAE/FC,MAAMF,GAAeG,MAAK,SAAChC,GACzB,GAAIA,EAASiC,GAAI,CACf,IAAIC,EAAU,GACdlC,EAASmC,OAAOH,MAAK,SAACI,GACpB,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAQlH,KAAKoH,OAAQD,IAAK,CAC5C,IAAME,EAAY,GAClBA,EAAUxC,OAASqC,EAAQlH,KAAKmH,GAAG1F,GACnC4F,EAAU/B,IAAM4B,EAAQlH,KAAKmH,GAAG7B,IAChC+B,EAAUpC,SAAWiC,EAAQlH,KAAKmH,GAAGlC,SACrCoC,EAAUlC,YAAc+B,EAAQlH,KAAKmH,GAAGhC,YACxCkC,EAAUnC,YAAcgC,EAAQlH,KAAKmH,GAAGjC,YACxCmC,EAAUC,SAAWJ,EAAQlH,KAAKmH,GAAGG,SACrCD,EAAUE,UAAYL,EAAQlH,KAAKmH,GAAGI,UACtCF,EAAU9B,WAAa2B,EAAQlH,KAAKmH,GAAG5B,WACvC8B,EAAUjC,YACR8B,EAAQlH,KAAKmH,GAAGK,SAASC,aAAa,GAAGrC,YAC3CiC,EAAUhC,QAAV,UAAuB6B,EAAQlH,KAAKmH,GAAGO,UAAU,GAAGC,MAApD,aAA8DT,EAAQlH,KAAKmH,GAAGO,UAAU,GAAGE,MAA3F,aAAqGV,EAAQlH,KAAKmH,GAAGO,UAAU,GAAGG,MAAlI,YAA2IX,EAAQlH,KAAKmH,GAAGO,UAAU,GAAGI,KAAxK,YAAgLZ,EAAQlH,KAAKmH,GAAGO,UAAU,GAAGhB,UAA7M,YAA0NQ,EAAQlH,KAAKmH,GAAGO,UAAU,GAAGK,YACvPV,EAAU3B,aAAewB,EAAQlH,KAAKmH,GAAGzB,aACzC2B,EAAUW,eAAiBd,EAAQlH,KAAKmH,GAAGa,eAC3CX,EAAUY,OAASf,EAAQlH,KAAKmH,GAAGc,OACnCjB,EAAQkB,KAAKb,GAEfZ,EAAgBO,WAGlB7G,QAAQf,MAAR,iBAAwB0F,EAASqD,iBAKvC,EAAkCC,aAASvC,IAA1B7F,GAAjB,EAAQqI,QAAR,EAAiBrI,MAGXsI,GAHN,EAAuBC,QAGF,OAAJvI,QAAI,IAAJA,OAAA,EAAAA,EAAMwI,KAAM,IAsD7B,OACE,qBACE1F,UAAU,+BADZ,SAEE,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,mBAAf,SACE,cAAC,IAAD,CACE2F,iBAAkB,CAChBC,IAAK9B,2CAEP+B,cAxJa,CACrBC,GAAI,CAAC,MAAO,MACZC,GAAI,CAAC,IAAO,MACZC,GAAI,CAAC,IAAO,WACZC,GAAI,CAAC,IAAO,KACZC,GAAI,CAAC,MAAO,KACZC,GAAI,CAAC,WAAY,MACjBC,GAAI,CAAC,IAAO,OACZC,GAAI,CAAC,IAAO,IACZC,GAAI,CAAC,IAAO,MACZC,GAAI,CAAC,MAAO,KACZC,GAAI,CAAC,MAAO,IACZC,GAAI,CAAC,IAAO,IACZC,GAAI,CAAC,IAAO,IACZC,GAAI,CAAC,IAAO,MACZC,GAAI,CAAC,WAAY,WACjBC,GAAI,CAAC,WAAY,WACjBC,GAAI,CAAC,WAAY,WACjBC,GAAI,CAAC,WAAY,UACjBC,GAAI,CAAC,WAAY,WACjBC,GAAI,CAAC,WAAY,YACjBC,GAAI,CAAC,WAAY,WACjBC,GAAI,CAAC,WAAY,WACjBC,GAAI,CAAC,WAAY,WACjBC,GAAI,CAAC,WAAY,YACjBC,GAAI,CAAC,WAAY,YACjBC,GAAI,CAAC,WAAY,WACjBC,GAAI,CAAC,WAAY,WACjBC,GAAI,CAAC,WAAY,WACjBC,GAAI,CAAC,WAAY,UACjBC,GAAI,CAAC,WAAY,YACjBC,GAAI,CAAC,UAAW,UAChBC,GAAI,CAAC,WAAY,WACjBC,GAAI,CAAC,UAAW,YAChBC,GAAI,CAAC,WAAY,YACjBC,GAAI,CAAC,UAAW,YAChBC,GAAI,CAAC,WAAY,YACjBC,GAAI,CAAC,WAAY,WACjBC,GAAI,CAAC,UAAW,WAChBC,GAAI,CAAC,WAAY,WACjBC,GAAI,CAAC,WAAY,YACjBC,GAAI,CAAC,WAAY,WACjBC,GAAI,CAAC,WAAY,WACjBC,GAAI,CAAC,WAAY,YACjBC,GAAI,CAAC,WAAY,WACjBC,GAAI,CAAC,WAAY,WACjBC,GAAI,CAAC,WAAY,YACjBC,GAAI,CAAC,WAAY,YACjBC,GAAI,CAAC,UAAW,YAChBC,GAAI,CAAC,WAAY,WACjBC,GAAI,CAAC,UAAW,YAsGsBzF,GAC9B0F,YAAa7F,EACb8F,oCAAkC,EAClCC,kBAAmB,mBA/DP,SAACxG,EAAKyG,GAC1B,IADoC,IAAD,WAC1B9E,GACP,IAAI+E,OAAM,EACV1F,EAAahB,KAAI,SAACU,GAqChB,OAjCA/F,QAAQmE,IAAI4H,GAERhG,EAAKrB,SAAWyD,EAAS3D,YAAYwC,GAAGtC,QAC1CqH,EAAS,IAAID,EAAKE,OAAO,CACvBC,SAAU,CAAEC,IAAKC,OAAOpG,EAAKoB,UAAWiF,IAAKD,OAAOpG,EAAKqB,YACzD/B,MACAgH,MAAOtG,EAAKjB,SACZwH,KAAM,CACJnH,IAAK,kEAGFoH,YAAY,SAAS,WAC1BvG,EAAQD,MAGAA,EAAKrB,SAAWyD,EAAS3D,YAAYwC,GAAGtC,SAClDqH,EAAS,IAAID,EAAKE,OAAO,CACvBC,SAAU,CAAEC,IAAKC,OAAOpG,EAAKoB,UAAWiF,IAAKD,OAAOpG,EAAKqB,YACzD/B,MACAgH,MAAOtG,EAAKjB,SACZwH,KAAM,CACJnH,IAAK,0DAGFoH,YAAY,SAAS,WAC1BvG,EAAQD,MAOZ/F,QAAQmE,IAAI4H,GACLA,MAvCF/E,EAAI,EAAGA,EAAImB,EAAS3D,YAAYyC,OAAQD,IAAM,EAA9CA,GA8DqCwF,CAAnB,EAAGnH,IAAH,EAAQyG,WAI/B,cAAC,GAAD,CAAgBvH,SAAUwB,UCjKnB0G,GAjBO,WAClB,OACI,qBAAK9J,UAAU,UAAf,SACI,sBAAKrB,GAAG,YAAYqB,UAAU,YAA9B,UACI,qEACI,mBAAGoB,KAAK,2CAA2C5E,OAAO,QAA1D,6BACA,mBAAG4E,KAAK,kCAAkC5E,OAAO,QAAjD,kCACA,mBAAG4E,KAAK,uBAAuB5E,OAAO,QAAtC,wBACA,mBAAG4E,KAAK,mCAAR,iC,2BCuCL2I,GA3CK,WAChB,OACA,qBAAK/J,UAAU,UAAf,SACI,sBAAKrB,GAAG,UAAUqB,UAAU,UAA5B,UACI,sDACI,sBAAKA,UAAU,eAAf,UACI,iDACA,oBAAGA,UAAU,QAAb,UACI,mBAAGoB,KAAK,gCAAR,SAAwC,cAAC,KAAD,CAAiBuI,KAAMK,KAAYhK,UAAU,YACrF,mBAAGoB,KAAK,4DAAR,SAAoE,cAAC,KAAD,CAAiBuI,KAAMM,KAAYjK,UAAU,YACjH,mBAAGoB,KAAK,8BAAR,SAAsC,cAAC,KAAD,CAAiBuI,KAAMO,KAAUlK,UAAU,kBAGzF,sBAAKA,UAAU,eAAf,UACI,sDACA,oBAAGA,UAAU,QAAb,UACI,mBAAGoB,KAAK,yCAAR,SAAiD,cAAC,KAAD,CAAiBuI,KAAMK,KAAYhK,UAAU,YAC9F,mBAAGoB,KAAK,6DAAR,SAAqE,cAAC,KAAD,CAAiBuI,KAAMM,KAAYjK,UAAU,YAClH,mBAAGoB,KAAK,yCAAR,SAAiD,cAAC,KAAD,CAAiBuI,KAAMO,KAAUlK,UAAU,kBAGpG,sBAAKA,UAAU,eAAf,UACI,4CACA,oBAAGA,UAAU,QAAb,UACI,mBAAGoB,KAAK,+BAAR,SAAuC,cAAC,KAAD,CAAiBuI,KAAMK,KAAYhK,UAAU,YACpF,mBAAGoB,KAAK,mDAAR,SAA2D,cAAC,KAAD,CAAiBuI,KAAMM,KAAYjK,UAAU,YACxG,mBAAGoB,KAAK,gCAAR,SAAwC,cAAC,KAAD,CAAiBuI,KAAMO,KAAUlK,UAAU,kBAG3F,sBAAKA,UAAU,eAAf,UACI,+CACA,oBAAGA,UAAU,QAAb,UACI,mBAAGoB,KAAK,gCAAR,SAAwC,cAAC,KAAD,CAAiBuI,KAAMK,KAAYhK,UAAU,YACrF,mBAAGoB,KAAK,uDAAR,SAA+D,cAAC,KAAD,CAAiBuI,KAAMM,KAAYjK,UAAU,YAC5G,mBAAGoB,KAAK,kCAAR,SAA0C,cAAC,KAAD,CAAiBuI,KAAMO,KAAUlK,UAAU,wB,UCxC7GgD,EAAQ,KAAUC,SAElB,IAsEekH,GAtEU,SAAC,GAAkB,IAAhB3E,EAAe,EAAfA,SAiC1B,OACE,qCACGnI,QAAQmE,IAAR,oBAAyBgE,IAC1B,qBAAKxF,UAAU,qBAAf,SACGwF,EAAS9C,KAAI,SAACU,GAAD,OACZ,sBAAKpD,UAAU,eAAf,UACE,6BAAKoD,EAAKjB,WACV,4BAAIiB,EAAKhB,cACT,4BAAIgB,EAAKf,cACT,oBAAGjB,KAAI,cAASgC,EAAKd,aAArB,2BACiBc,EAAKd,eAEtB,4BAAIc,EAAKb,UACT,mBAAGnB,KAAMgC,EAAKZ,IAAd,6CACA,4CACA,6BACGY,EAAKX,WAAWC,KAAI,SAACC,GACpB,OAAO,mCAAwBA,EAASlG,KAAjC,MAASkG,EAAShE,SAG7B,8CACA,6BACGyE,EAAKR,aAAaF,KAAI,SAACG,GACtB,OACE,mCACIA,EAAIC,KADR,MACiBD,EAAIR,YAAa,MADzBQ,EAAIR,8BCtD/BW,EAAQ,KAAUC,SAElB,IAyDemH,GAzDC,WACd,MAA0B9E,aAASvC,IAA3BwC,EAAR,EAAQA,QAASrI,EAAjB,EAAiBA,KAEXsI,GAAe,OAAJtI,QAAI,IAAJA,OAAA,EAAAA,EAAMwI,KAAM,GAEvB2E,EAAmB,GAoCzB,OACE,8BACG9E,EACC,6CAEA,qCAvCe,SAACC,GACpBnI,QAAQmE,IAAI,wBACZ,IAAK,IAAI6C,EAAI,EAAGA,EAAImB,EAAS3D,YAAYyC,OAAQD,IAAK,CACpD,IAAMR,EAAa,oDAAgD2B,EAAS3D,YAAYwC,GAAGtC,OAAxE,oBAA0F+B,4CAE7GC,MAAMF,GAAeG,MAAK,SAAChC,GACrBA,EAASiC,KACXjC,EAASmC,OAAOH,MAAK,SAACI,GAGpB,IAAMkG,EAAkB,GACxBA,EAAgB9H,IAAM4B,EAAQlH,KAAK,GAAGsF,IACtC8H,EAAgBnI,SAAWiC,EAAQlH,KAAK,GAAGiF,SAC3CmI,EAAgBjI,YAAc+B,EAAQlH,KAAK,GAAGmF,YAC9CiI,EAAgBlI,YAAcgC,EAAQlH,KAAK,GAAGkF,YAC9CkI,EAAgB9F,SAAWJ,EAAQlH,KAAK,GAAGsH,SAC3C8F,EAAgB7F,UAAYL,EAAQlH,KAAK,GAAGuH,UAC5C6F,EAAgB7H,WAAa2B,EAAQlH,KAAK,GAAGuF,WAC7C6H,EAAgBhI,YACd8B,EAAQlH,KAAK,GAAGwH,SAASC,aAAa,GAAGrC,YAC3CgI,EAAgB/H,QAAhB,UAA6B6B,EAAQlH,KAAK,GAAG0H,UAAU,GAAGC,MAA1D,aAAoET,EAAQlH,KAAK,GAAG0H,UAAU,GAAGE,MAAjG,aAA2GV,EAAQlH,KAAK,GAAG0H,UAAU,GAAGG,MAAxI,YAAiJX,EAAQlH,KAAK,GAAG0H,UAAU,GAAGI,KAA9K,YAAsLZ,EAAQlH,KAAK,GAAG0H,UAAU,GAAGhB,UAAnN,YAAgOQ,EAAQlH,KAAK,GAAG0H,UAAU,GAAGK,YAC7PqF,EAAgB1H,aAAewB,EAAQlH,KAAK,GAAG0F,aAC/C0H,EAAgBpF,eAAiBd,EAAQlH,KAAK,GAAGgI,eACjDoF,EAAgBnF,OAASf,EAAQlH,KAAK,GAAGiI,OACzCkF,EAAiBjF,KAAKkF,MAExBjN,QAAQmE,IAAI6I,QAcX5G,CAAa+B,GACbnI,QAAQmE,IAAR,4BAAiC6I,IAFpC,YAGY7E,EAAS3D,YAAYyC,OAHjC,iBAIE,cAAC,GAAD,CAAkBkB,SAAU6E,UCvChCE,GAAWC,YAAe,CAC9BC,IAAK,aAGDC,GAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAC1BtQ,EAAQM,aAAaC,QAAQ,YACnC,MAAO,CACL+P,QAAQ,2BACHA,GADE,IAELC,cAAevQ,EAAK,iBAAaA,GAAU,SAK3CwQ,GAAS,IAAIC,IAAa,CAC9BC,KAAMP,GAASQ,OAAOX,IACtBY,MAAO,IAAIC,MAqCEC,OAlCf,WACE,OACE,cAACC,EAAA,EAAD,CAAgBP,OAAQA,GAAxB,SACE,cAAC,IAAD,UACE,gCACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,gBAAlB,SACE,cAAC,GAAD,CAAOrI,UAAW,MAEpB,cAAC,IAAD,CAAOoI,OAAK,EAACC,KAAK,QAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,WAAlB,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,aAAlB,SACE,cAACC,GAAD,MAEF,cAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,WAAlB,SACE,cAACE,GAAD,SAGJ,cAAC,EAAD,YCpDJC,GAAcC,QACW,cAA7B3Q,OAAOC,SAAS2Q,UAEa,UAA7B5Q,OAAOC,SAAS2Q,UAEhB5Q,OAAOC,SAAS2Q,SAASC,MACvB,2DAyCJ,SAASC,GAAgBC,EAAO/I,GAC9BgJ,UAAUC,cACPC,SAASH,GACThI,MAAK,SAAAoI,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBhJ,QACf2I,UAAUC,cAAcO,YAI1BpP,QAAQmE,IACN,iHAKEyB,GAAUA,EAAOyJ,UACnBzJ,EAAOyJ,SAASN,KAMlB/O,QAAQmE,IAAI,sCAGRyB,GAAUA,EAAO0J,WACnB1J,EAAO0J,UAAUP,WAO5BQ,OAAM,SAAAtQ,GACLe,QAAQf,MAAM,4CAA6CA,M,OC5FjEuQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SDWnB,SAAkBhK,GACvB,GAEE,kBAAmBgJ,UAAW,CAI9B,GADkB,IAAIiB,IAAIpJ,GAAwB7I,OAAOC,SAASkG,MACpD+L,SAAWlS,OAAOC,SAASiS,OAIvC,OAGFlS,OAAOmS,iBAAiB,QAAQ,WAC9B,IAAMpB,EAAK,UAAMlI,GAAN,sBAEP6H,KAgEV,SAAiCK,EAAO/I,GAEtCc,MAAMiI,EAAO,CACXnB,QAAS,CAAE,iBAAkB,YAE5B7G,MAAK,SAAAhC,GAEJ,IAAMqL,EAAcrL,EAAS6I,QAAQyC,IAAI,gBAEnB,MAApBtL,EAASuL,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CvB,UAAUC,cAAcuB,MAAMzJ,MAAK,SAAAoI,GACjCA,EAAasB,aAAa1J,MAAK,WAC7B/I,OAAOC,SAASyS,eAKpB5B,GAAgBC,EAAO/I,MAG1B2J,OAAM,WACLvP,QAAQmE,IACN,oEAvFAoM,CAAwB5B,EAAO/I,GAI/BgJ,UAAUC,cAAcuB,MAAMzJ,MAAK,WACjC3G,QAAQmE,IACN,iHAMJuK,GAAgBC,EAAO/I,OCpC/BiJ,I","file":"static/js/main.ee4ee19c.chunk.js","sourcesContent":["import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/Home');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import { gql } from '@apollo/client';\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_VISITED_PARK = gql`\n  mutation addVisitedPark($input: VisitedPark!) {\n    addVisitedPark(input: $input) {\n      _id\n      username\n      email\n      visitedParks {\n        parkId\n        url\n        fullName\n        description\n        designation\n        latitude\n        longitude\n        activities\n        phoneNumber\n        address\n        # entranceFees\n        # entrancePasses\n        # images\n      }\n    }\n  }\n`;\n\nexport const SAVE_VISITED = gql`\nmutation saveVisited($parkId: String!) {\n    saveVisited(parkId: $parkId) {\n      email\n    }\n  }\n`\n","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/react-hooks'\n\n// import { createUser } from '../utils/API';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations'\n\nconst SignupForm = () => {\n    // set initial form state\n    const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n    // set state for form validation\n    const [validated] = useState(false);\n    // set state for alert\n    const [showAlert, setShowAlert] = useState(false);\n\n    const [addUser, { error }] = useMutation(ADD_USER)\n\n    const handleInputChange = (event) => {\n        const { name, value } = event.target;\n        setUserFormData({ ...userFormData, [name]: value });\n    };\n\n    const handleFormSubmit = async (event) => {\n        event.preventDefault();\n\n        // check if form has everything (as per react-bootstrap docs)\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n\n        try {\n            const { data } = await addUser({\n                variables: { ...userFormData },\n            });\n\n            Auth.login(data.addUser.token);\n\n        } catch (err) {\n            console.error(err);\n            setShowAlert(true);\n        }\n\n        setUserFormData({\n            username: '',\n            email: '',\n            password: '',\n        });\n    };\n\n    return (\n        <>\n            {/* This is needed for the validation functionality above */}\n            <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n                {/* show alert if server response is bad */}\n                <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n                    Something went wrong with your signup!\n                </Alert>\n\n                <Form.Group>\n                    <Form.Label htmlFor='username'>Username</Form.Label>\n                    <Form.Control\n                        type='text'\n                        placeholder='Your username'\n                        name='username'\n                        onChange={handleInputChange}\n                        value={userFormData.username}\n                        required\n                    />\n                    <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group>\n                    <Form.Label htmlFor='email'>Email</Form.Label>\n                    <Form.Control\n                        type='email'\n                        placeholder='Your email address'\n                        name='email'\n                        onChange={handleInputChange}\n                        value={userFormData.email}\n                        required\n                    />\n                    <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group>\n                    <Form.Label htmlFor='password'>Password</Form.Label>\n                    <Form.Control\n                        type='password'\n                        placeholder='Your password'\n                        name='password'\n                        onChange={handleInputChange}\n                        value={userFormData.password}\n                        required\n                    />\n                    <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n                </Form.Group>\n                <Button\n                    disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n                    type='submit'\n                    variant='success'>\n                    Submit\n                </Button>\n            </Form>\n        </>\n    );\n};\n\nexport default SignupForm;","// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport \"../index.css\";\n\n// import { loginUser } from '../utils/API';\nimport Auth from '../utils/auth';\n\nimport { useMutation } from '@apollo/react-hooks';\nimport { LOGIN_USER } from '../utils/mutations';\n\nconst LoginForm = () => {\n    const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n    const [validated] = useState(false);\n    const [showAlert, setShowAlert] = useState(false);\n\n    const [loginUser, { error }] = useMutation(LOGIN_USER);\n\n    const handleInputChange = (event) => {\n        const { name, value } = event.target;\n        setUserFormData({ ...userFormData, [name]: value });\n    };\n\n    const handleFormSubmit = async (event) => {\n        event.preventDefault();\n\n        // check if form has everything (as per react-bootstrap docs)\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n\n        try {\n            const { data } = await loginUser({\n                variables: { ...userFormData }\n            });\n\n            Auth.login(data.login.token);\n\n        } catch (err) {\n            console.error(err);\n            setShowAlert(true);\n        }\n\n        setUserFormData({\n            username: '',\n            email: '',\n            password: '',\n        });\n    };\n\n    return (\n        <><img id=\"login-img\" src = 'https://i.imgur.com/ScrFDBm.png'></img>\n            <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n                <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n                    Something went wrong with your login credentials!\n                </Alert>\n                <Form.Group>\n                    <Form.Label htmlFor='email'>Email</Form.Label>\n                    <Form.Control\n                        type='text'\n                        placeholder='Your email'\n                        name='email'\n                        onChange={handleInputChange}\n                        value={userFormData.email}\n                        required\n                    />\n                    <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group>\n                    <Form.Label htmlFor='password'>Password</Form.Label>\n                    <Form.Control\n                        type='password'\n                        placeholder='Your password'\n                        name='password'\n                        onChange={handleInputChange}\n                        value={userFormData.password}\n                        required\n                    />\n                    <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n                </Form.Group>\n                <Button\n                    disabled={!(userFormData.email && userFormData.password)}\n                    type='submit'\n                    variant='success'>\n                    Submit\n                </Button>\n            </Form>\n        </>\n    );\n};\n\nexport default LoginForm;","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\nimport \"../index.css\";\n\nimport Auth from '../utils/auth'\n\nconst AppNavbar = () => {\n    const [showModal, setShowModal] = useState(false);\n\n    return (\n        <>\n            <Navbar id='navbar-background' bg='dark' variant='dark' expand='lg'>\n                <Container fluid>\n                    <Navbar.Brand as={Link} to='/'>\n                    <img src = 'https://i.imgur.com/ScrFDBm.png'style={{ height: '4.6em', width: '20em'}}></img>\n                    </Navbar.Brand>\n                    <Navbar.Toggle aria-controls='navbar'/>\n                    <Navbar.Collapse id='navbar'style={{justifyContent: \"flex-end\"}}>\n                        <Nav className='ml-auto'>\n                            {/* if user is logged in show saved books and logout */}\n                            {Auth.loggedIn() ? (\n                                <>\n                                    <span>Hey there, {Auth.getProfile().data.username}!</span>\n                                \n                                    <Nav.Link className=\"btn btn-lg btn-link m=2 text-light\" as={Link} to=\"/visited\">\n                                        Prev Visited\n                                    </Nav.Link>\n                                    <Nav.Link className=\"btn btn-lg btn-link m=2 text-light\" as={Link} to=\"/home\">\n                                        US Map\n                                    </Nav.Link>\n                                    <button className=\"btn btn-lg btn-link m=2 text-light\" onClick={Auth.logout}>\n                                        Logout\n                                    </button>\n                                </>\n                            ) : (\n                                <>\n                                    <Nav.Link className=\"btn btn-lg btn-link m=2 text-light\" onClick={() => setShowModal(true)}>\n                                        Login/Sign Up \n                                    </Nav.Link>\n                                </>\n                            )}\n                        </Nav>\n                    </Navbar.Collapse>\n                </Container>\n            </Navbar>\n            <Modal\n                size='lg'\n                show={showModal}\n                onHide={() => setShowModal(false)}\n                aria-labelledby='signup-modal'>\n                {/* tab container to do either signup or login component */}\n                <Tab.Container defaultActiveKey='login'>\n                    <Modal.Header closeButton>\n                        <Modal.Title id='signup-modal'>\n                            <Nav variant='pills'>\n                                <Nav.Item>\n                                    <Nav.Link eventKey='login'>Login</Nav.Link>\n                                </Nav.Item>\n                                <Nav.Item>\n                                    <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                                </Nav.Item>\n                            </Nav>\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Tab.Content>\n                            <Tab.Pane eventKey='login'>\n                                <LoginForm handleModalClose={() => setShowModal(false)} />\n                            </Tab.Pane>\n                            <Tab.Pane eventKey='signup'>\n                                <SignUpForm handleModalClose={() => setShowModal(false)} />\n                            </Tab.Pane>\n                        </Tab.Content>\n                    </Modal.Body>\n                </Tab.Container>\n            </Modal>\n        </>\n    )\n}\n\nexport default AppNavbar;","import React from \"react\";\nimport { Link } from \"react-router-dom\"\nimport \"../index.css\";\n\nfunction Footer() {\nreturn (\n    <footer className=\"bg-dark fixed-bottom\">\n        <div className=\"container\">\n            <p className=\"m-0 text-center text-white\">\n            <Link className=\"btn btn-lg btn-link m=2 text-light\"to=\"/portfolio\"><img className=\"footer-img\" src = 'https://i.imgur.com/jBk4CCe.png'></img></Link>\n            <Link className=\"btn btn-lg btn-link m=2 text-light\" to=\"/contact\"><img className=\"footer-img\" src = 'https://i.imgur.com/X5PRHtt.png'></img></Link>\n            <a className=\"btn btn-lg btn-link m=2 text-light\" href=\"https://github.com/Chris-Franklin-1701/MERN-Project3-Parks\"><img className=\"footer-img\" src = 'https://i.imgur.com/Ze9kryd.png'></img></a>\n            </p>\n        </div>\n    </footer>\n);\n}\n\nexport default Footer;\n\n\n","import React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport USAMap from \"react-usa-map\";\nimport '../index.css';\n\nimport Auth from '../utils/auth'\n\nconst Home = () => {\n    // Do we need useParams and check for profile?\n /* if (!Auth.loggedIn()) {\n        return (\n            <h4>\n                You need to be logged in to see this.\n            </h4>\n        );\n    }  */\n\n    const mapHandler = (event) => {\n        window.location.assign(`/state/${event.target.dataset.name}`)\n    };\n\n    /* optional customization of filling per state and calling custom callbacks per state */\n    const statesCustomConfig = () => {\n        return {\n            \"NJ\": {\n                clickHandler: (event) => console.log('Custom handler for NJ', event.target.dataset),\n                \n            },\n            \"NY\": {\n            }\n        };\n    };\n\n    return (\n        <div id=\"home\" className=\"overlay\">\n            <USAMap customize={statesCustomConfig()} onClick={mapHandler} />\n        </div>\n    );\n}\n\nexport default Home;","import React from \"react\";\nimport { Nav } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport \"../index.css\";\n\nconst LandingPage = () => {\n  return (\n      <>\n      <div className=\"overlay\"></div>\n        <header id=\"landing-header\">\n        \n        <div className=\"parksText\">\n          <Nav.Link as={Link} to=\"/home\">\n            <img\n            src=\"https://i.imgur.com/ACg9toi.png\" className=\"logo-animation\"/>\n          </Nav.Link>\n            <h1>\n              Parks for Rec \n            </h1>\n          \n          </div>\n          </header>\n        </>\n  );\n};\n\nexport default LandingPage;\n\n","import React, { useState } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { ADD_VISITED_PARK, SAVE_VISITED } from \"../utils/mutations\";\nimport Auth from \"../utils/auth\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport \"../index.css\";\n\nconst StateParkInfo = ({ parkData }) => {\n  // const [addVisitedPark, { error }] = useMutation(ADD_VISITED_PARK);\n  const [saveVisited, { error }] = useMutation(SAVE_VISITED);\n  const [showModal, setShowModal] = useState(false);\n\n  // const [tripPark, { error1 }] = useMutation(TRIP_PARK);\n\n  const handleClose = () => setShowModal(false);\n  const handleShow = () => setShowModal(true);\n\n  const handleAddVisitedTrip = async (parkData) => {\n    console.log(parkData);\n\n    setShowModal(true);\n\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const response = await saveVisited({\n        variables: { parkId: parkData.parkId },\n      });\n      console.log(response);\n\n      if (!response) {\n        throw new Error(\"Something went wrong\");\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n\n  return (\n    <div className=\"info col-4\">\n      {parkData.fullName !== undefined ? (\n        <>\n          <h2>{parkData.fullName}</h2>\n          <p>{parkData.designation}</p>\n          <p>{parkData.description}</p>\n          <a href={`tel:${parkData.phoneNumber}`}>\n            Phone Number: {parkData.phoneNumber}\n          </a>\n          <p>{parkData.address}</p>\n          <a href={parkData.url}>Click here for more information</a>\n          <h4>Activities</h4>\n          <ul>\n            {parkData.activities.map((activity) => {\n              return <li key={activity.id}> {activity.name} </li>;\n            })}\n          </ul>\n          <h4>EntranceFees</h4>\n          <ul>\n            {parkData.entranceFees.map((fee) => {\n              return (\n                <li key={fee.description}>\n                  ${fee.cost} - {fee.description}{\" \"}\n                </li>\n              );\n            })}\n          </ul>\n          <button onClick={() => handleAddVisitedTrip(parkData)} className=\"\">\n            {\" \"}\n            Add to Previously Visited{\" \"}\n          </button>\n          <div style={{ height: 95 }}></div>\n        </>\n      ) : (\n        <>\n          <h2>Click on marker to see info</h2>\n        </>\n      )}\n      <Modal size=\"lg\" show={showModal} onHide={() => setShowModal(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Park added successful</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>This park has been add to your visited park</p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={handleClose}>\n            Ok\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n};\n\nexport default StateParkInfo;\n","import { gql } from '@apollo/client';\n\n\nexport const GET_ME = gql`\n    query me {\n        me {\n            _id\n            username\n            email\n            saveVisited {\n                parkId\n            }\n        }\n    }\n`\n","import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport GoogleMapReact from \"google-map-react\";\nimport StateParksInfo from \"../components/StateParkInfo\"\nimport { useQuery, useMutation } from '@apollo/client';\nimport { GET_ME } from '../utils/queries';\nimport \"../index.css\";\nrequire('dotenv').config();\n\n\n// const npsAPIKey = process.env.REACT_APP_NPS_API_KEY;\n\nconst State = ({ zoomLevel }) => {\n  const [park, setPark] = useState({});\n  const { state } = useParams();\n\n  useEffect(() => {\n    getParksData(state);\n  }, [state]);\n\n  const [parksDataArr, setParksDataArr] = useState([]);\n\n  const stateLatAndLon = {\n    WI: [44.5, -89.5],\n    WV: [39.0, -80.5],\n    VT: [44.0, -72.699997],\n    TX: [31.0, -100.0],\n    SD: [44.5, -100.0],\n    RI: [41.700001, -71.5],\n    OR: [44.0, -120.5],\n    NY: [43.0, -75.0],\n    NH: [44.0, -71.5],\n    NE: [41.5, -100.0],\n    KS: [38.5, -98.0],\n    MS: [33.0, -90.0],\n    IL: [40.0, -89.0],\n    DE: [39.0, -75.5],\n    CT: [41.599998, -72.699997],\n    AR: [34.799999, -92.199997],\n    IN: [40.273502, -86.126976],\n    MO: [38.573936, -92.60376],\n    FL: [27.994402, -81.760254],\n    NV: [39.876019, -117.224121],\n    ME: [45.367584, -68.972168],\n    MI: [44.182205, -84.506836],\n    GA: [33.247875, -83.441162],\n    HI: [19.741755, -155.844437],\n    AK: [66.160507, -153.369141],\n    TN: [35.860119, -86.660156],\n    VA: [37.926868, -78.024902],\n    NJ: [39.833851, -74.871826],\n    KY: [37.839333, -84.27002],\n    ND: [47.650589, -100.437012],\n    MN: [46.39241, -94.63623],\n    OK: [36.084621, -96.921387],\n    MT: [46.96526, -109.533691],\n    WA: [47.751076, -120.740135],\n    UT: [39.41922, -111.950684],\n    CO: [39.113014, -105.358887],\n    OH: [40.367474, -82.996216],\n    AL: [32.31823, -86.902298],\n    IA: [42.032974, -93.581543],\n    NM: [34.307144, -106.018066],\n    SC: [33.836082, -81.163727],\n    PA: [41.203323, -77.194527],\n    AZ: [34.048927, -111.093735],\n    MD: [39.045753, -76.641273],\n    MA: [42.407211, -71.382439],\n    CA: [36.778259, -119.417931],\n    ID: [44.068203, -114.742043],\n    WY: [43.07597, -107.290283],\n    NC: [35.782169, -80.793457],\n    LA: [30.39183, -92.329102],\n  };\n\n  const getParksData = (stateCode) => {\n    const npsRequestURL = `https://developer.nps.gov/api/v1/parks?stateCode=${stateCode}&api_key=${process.env.REACT_APP_NPS_API_KEY}`;\n\n    fetch(npsRequestURL).then((response) => {\n      if (response.ok) {\n        let tempArr = []\n        response.json().then((results) => {\n          for (let i = 0; i < results.data.length; i++) {\n            const parksData = {};\n            parksData.parkId = results.data[i].id;\n            parksData.url = results.data[i].url;\n            parksData.fullName = results.data[i].fullName;\n            parksData.description = results.data[i].description;\n            parksData.designation = results.data[i].designation;\n            parksData.latitude = results.data[i].latitude;\n            parksData.longitude = results.data[i].longitude;\n            parksData.activities = results.data[i].activities;\n            parksData.phoneNumber =\n              results.data[i].contacts.phoneNumbers[0].phoneNumber;\n            parksData.address = `${results.data[i].addresses[0].line1}, ${results.data[i].addresses[0].line2}, ${results.data[i].addresses[0].line3} ${results.data[i].addresses[0].city} ${results.data[i].addresses[0].stateCode} ${results.data[i].addresses[0].postalCode}`;\n            parksData.entranceFees = results.data[i].entranceFees;\n            parksData.entrancePasses = results.data[i].entrancePasses;\n            parksData.images = results.data[i].images;\n            tempArr.push(parksData);\n          }\n          setParksDataArr(tempArr)\n        })\n      } else {\n        console.error(`Error: ${response.statusText}`);\n      }\n    });\n  };\n\n  const  {loading, data, errors}  = useQuery(GET_ME);\n  // console.log(errors)\n\n  const userData = data?.me || [];\n  // console.log(userData)\n  let i = 0\n  const renderMarkers = (map, maps) => {\n    for (let i = 0; i < userData.saveVisited.length; i++) {\n      let marker;\n      parksDataArr.map((park) => {\n        // console.log(\"userdata\", userData.saveVisited[i].parkId)\n        // console.log(\"park\", park.parkId)\n        // console.log(userData.saveVisited.hasOwnProperty({__typename: 'Visited', parkId: park.parkId}))\n        console.log(marker)\n\n        if (park.parkId === userData.saveVisited[i].parkId) {\n          marker = new maps.Marker({\n            position: { lat: Number(park.latitude), lng: Number(park.longitude) },\n            map,\n            title: park.fullName,\n            icon: {\n              url: \"http://maps.google.com/mapfiles/kml/pushpin/red-pushpin.png\"       \n            },\n          });\n          marker.addListener('click', function() {\n            setPark(park)\n          })\n\n        } else if ((park.parkId !== userData.saveVisited[i].parkId)){\n          marker = new maps.Marker({\n            position: { lat: Number(park.latitude), lng: Number(park.longitude) },\n            map,\n            title: park.fullName,\n            icon: {\n              url: \"http://maps.google.com/mapfiles/kml/pal2/icon12.png\"         \n            },\n          });\n          marker.addListener('click', function() {\n            setPark(park)\n          }) \n          // marker.setMap(null)\n        } \n        // if(marker !== undefined) {\n        //   marker.setMap(null)\n        // }\n        console.log(marker)\n        return marker;\n      });\n      \n    }\n    // console.log(data)\n    \n  };\n\n\n\n\n  return (\n    <div\n      className=\"map-and-info container-fluid\">\n      <div className=\"row\">\n        <div className=\"google-map col-8\">\n          <GoogleMapReact\n            bootstrapURLKeys={{\n              key: process.env.REACT_APP_GOOGLE_API_KEY,\n            }}\n            defaultCenter={stateLatAndLon[state]}\n            defaultZoom={zoomLevel}\n            yesIWantToUseGoogleMapApiInternals\n            onGoogleApiLoaded={({ map, maps }) => renderMarkers(map, maps)}\n          \n          ></GoogleMapReact>\n        </div>\n        <StateParksInfo parkData={park} />\n      </div>\n    </div>\n  );\n};\n\nexport default State;\n","import React from \"react\";\nimport \"../index.css\";\n\nconst PortfolioPage = () => {\n    return (\n        <div className=\"overlay\">\n            <div id=\"portfolio\" className=\"portfolio\">\n                <h1>Please visit our team's portfolios:</h1>\n                    <a href=\"https://alexcwik.github.io/my_portfolio/\" target=\"blank\">Alex Cwiklinski</a>\n                    <a href=\"https://christopherfranklin.dev\" target=\"blank\">Christopher Franklin</a>\n                    <a href=\"https://seancraig.me\" target=\"blank\">Sean Craig</a>\n                    <a href=\"https://stewsabatino.github.io//\">Stew Sabatino</a>\n            </div>\n        </div>\n    )\n\n\n};\n\n\nexport default PortfolioPage;","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEnvelope } from '@fortawesome/free-solid-svg-icons';\nimport { faGithub, faLinkedin } from '@fortawesome/free-brands-svg-icons';\nimport \"../index.css\";\n\n\nconst ContactPage = () => {\n    return (\n    <div className=\"overlay\">\n        <div id=\"contact\" className=\"contact\">\n            <h1>Contact Information:</h1>\n                <div className=\"contact-name\">\n                    <h3>Alex Cwiklinski</h3>\n                    <a className=\"Icons\">\n                        <a href=\"mailto:alexcwik1490@gmail.com\"><FontAwesomeIcon icon={faEnvelope} className=\"fa-2x\"></FontAwesomeIcon></a>\n                        <a href=\"http://www.linkedin.com/in/alexander-cwiklinski-7b4955186\"><FontAwesomeIcon icon={faLinkedin} className=\"fa-2x\"></FontAwesomeIcon></a>\n                        <a href=\"https://github.com/alexcwik\"><FontAwesomeIcon icon={faGithub} className=\"fa-2x\"></FontAwesomeIcon></a>\n                    </a>\n                </div>\n                <div className=\"contact-name\">\n                    <h3>Christopher Franklin</h3>\n                    <a className=\"Icons\">\n                        <a href=\"mailto:contact@christopherfranklin.dev\"><FontAwesomeIcon icon={faEnvelope} className=\"fa-2x\"></FontAwesomeIcon></a>\n                        <a href=\"https://www.linkedin.com/in/christopher-franklin-a44957a4/\"><FontAwesomeIcon icon={faLinkedin} className=\"fa-2x\"></FontAwesomeIcon></a>\n                        <a href=\"https://github.com/Chris-Franklin-1701\"><FontAwesomeIcon icon={faGithub} className=\"fa-2x\"></FontAwesomeIcon></a>\n                    </a>\n                </div>\n                <div className=\"contact-name\">\n                    <h3>Sean Craig</h3>\n                    <a className=\"Icons\">\n                        <a href=\"mailto:seancraig21@gmail.com\"><FontAwesomeIcon icon={faEnvelope} className=\"fa-2x\"></FontAwesomeIcon></a>\n                        <a href=\"https://www.linkedin.com/in/sean-craig-bb219861/\"><FontAwesomeIcon icon={faLinkedin} className=\"fa-2x\"></FontAwesomeIcon></a>\n                        <a href=\"https://github.com/seanscraig\"><FontAwesomeIcon icon={faGithub} className=\"fa-2x\"></FontAwesomeIcon></a>\n                    </a>\n                </div>\n                <div className=\"contact-name\">\n                    <h3>Stew Sabatino</h3>\n                    <a className=\"Icons\">\n                        <a href=\"mailto:stewsabatino@gmail.com\"><FontAwesomeIcon icon={faEnvelope} className=\"fa-2x\"></FontAwesomeIcon></a>\n                        <a href=\"https://www.linkedin.com/in/stew-sabatino-62358a220/\"><FontAwesomeIcon icon={faLinkedin} className=\"fa-2x\"></FontAwesomeIcon></a>\n                        <a href=\"https://github.com/stewsabatino\"><FontAwesomeIcon icon={faGithub} className=\"fa-2x\"></FontAwesomeIcon></a>\n                    </a>\n                </div>\n        </div>\n    </div>\n    )\n};\n\n\nexport default ContactPage;","import React, { useState, useEffect } from \"react\";\nrequire(\"dotenv\").config();\n\nconst VisitedParksList = ({ userData }) => {\n  const visitedParksData = [];\n\n  const getParksData = (userData) => {\n    console.log(\"calling getParksData\");\n    for (let i = 0; i < userData.saveVisited.length; i++) {\n      const npsRequestURL = `https://developer.nps.gov/api/v1/parks?id=${userData.saveVisited[i].parkId}&api_key=${process.env.REACT_APP_NPS_API_KEY}`;\n\n      fetch(npsRequestURL).then((response) => {\n        if (response.ok) {\n          response.json().then((results) => {\n            const visitedParkData = {};\n            visitedParkData.url = results.data[0].url;\n            visitedParkData.fullName = results.data[0].fullName;\n            visitedParkData.description = results.data[0].description;\n            visitedParkData.designation = results.data[0].designation;\n            visitedParkData.latitude = results.data[0].latitude;\n            visitedParkData.longitude = results.data[0].longitude;\n            visitedParkData.activities = results.data[0].activities;\n            visitedParkData.phoneNumber =\n              results.data[0].contacts.phoneNumbers[0].phoneNumber;\n            visitedParkData.address = `${results.data[0].addresses[0].line1}, ${results.data[0].addresses[0].line2}, ${results.data[0].addresses[0].line3} ${results.data[0].addresses[0].city} ${results.data[0].addresses[0].stateCode} ${results.data[0].addresses[0].postalCode}`;\n            visitedParkData.entranceFees = results.data[0].entranceFees;\n            visitedParkData.entrancePasses = results.data[0].entrancePasses;\n            visitedParkData.images = results.data[0].images;\n            visitedParksData.push(visitedParkData);\n          });\n          console.log(visitedParksData);\n        }\n      });\n    }\n  };\n\n  return (\n    <>\n      {console.log(`userData: ${userData}`)}\n      <div className=\"visited-parks-list\">\n        {userData.map((park) => (\n          <div className=\"park-preview\">\n            <h2>{park.fullName}</h2>\n            <p>{park.designation}</p>\n            <p>{park.description}</p>\n            <a href={`tel:${park.phoneNumber}`}>\n              Phone Number: {park.phoneNumber}\n            </a>\n            <p>{park.address}</p>\n            <a href={park.url}>Click here for more information</a>\n            <h4>Activities</h4>\n            <ul>\n              {park.activities.map((activity) => {\n                return <li key={activity.id}> {activity.name} </li>;\n              })}\n            </ul>\n            <h4>EntranceFees</h4>\n            <ul>\n              {park.entranceFees.map((fee) => {\n                return (\n                  <li key={fee.description}>\n                    ${fee.cost} - {fee.description}{\" \"}\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default VisitedParksList;\n","import React, { useState, useEffect } from \"react\";\nimport Auth from \"../utils/auth\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { GET_ME } from \"../utils/queries\";\nimport VisitedParksList from \"../components/VisitedParksList\";\nimport \"../index.css\";\nrequire(\"dotenv\").config();\n\nconst Visited = () => {\n  const { loading, data } = useQuery(GET_ME);\n\n  const userData = data?.me || [];\n\n  const visitedParksData = [];\n\n  const getParksData = (userData) => {\n    console.log(\"calling getParksData\");\n    for (let i = 0; i < userData.saveVisited.length; i++) {\n      const npsRequestURL = `https://developer.nps.gov/api/v1/parks?id=${userData.saveVisited[i].parkId}&api_key=${process.env.REACT_APP_NPS_API_KEY}`;\n\n      fetch(npsRequestURL).then((response) => {\n        if (response.ok) {\n          response.json().then((results) => {\n            // console.log(\"fetch!!!!\");\n            // console.log(results);\n            const visitedParkData = {};\n            visitedParkData.url = results.data[0].url;\n            visitedParkData.fullName = results.data[0].fullName;\n            visitedParkData.description = results.data[0].description;\n            visitedParkData.designation = results.data[0].designation;\n            visitedParkData.latitude = results.data[0].latitude;\n            visitedParkData.longitude = results.data[0].longitude;\n            visitedParkData.activities = results.data[0].activities;\n            visitedParkData.phoneNumber =\n              results.data[0].contacts.phoneNumbers[0].phoneNumber;\n            visitedParkData.address = `${results.data[0].addresses[0].line1}, ${results.data[0].addresses[0].line2}, ${results.data[0].addresses[0].line3} ${results.data[0].addresses[0].city} ${results.data[0].addresses[0].stateCode} ${results.data[0].addresses[0].postalCode}`;\n            visitedParkData.entranceFees = results.data[0].entranceFees;\n            visitedParkData.entrancePasses = results.data[0].entrancePasses;\n            visitedParkData.images = results.data[0].images;\n            visitedParksData.push(visitedParkData);\n          });\n          console.log(visitedParksData);\n        }\n      });\n    }\n  };\n\n\n\n  return (\n    <div>\n      {loading ? (\n        <div>Loading...</div>\n      ) : (\n        <>\n          {getParksData(userData)}\n          {console.log(`visitedParksData: ${visitedParksData}`)}\n          You have {userData.saveVisited.length} visited parks\n          <VisitedParksList userData={visitedParksData} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Visited;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\n\nimport Navbar from \"./components/Navbar\";\nimport Footer from \"./components/Footer\";\nimport Home from \"./pages/Home\";\nimport LandingPage from \"./pages/LandingPage\";\nimport State from \"./pages/State\";\nimport PortfolioPage from \"./pages/Portfolio\";\nimport ContactPage from \"./pages/Contact\";\nimport Visited from \"./pages/Visited\";\n\nconst httpLink = createHttpLink({\n  uri: \"/graphql\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"id_token\");\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <Navbar />\n          <Switch>\n            <Route exact path=\"/\">\n              <LandingPage />\n            </Route>\n            <Route exact path=\"/state/:state\">\n              <State zoomLevel={6}/>\n            </Route>\n            <Route exact path=\"/home\">\n              <Home />\n            </Route>\n            <Route exact path=\"/visited\">\n              <Visited />\n            </Route>\n            <Route exact path=\"/portfolio\">\n              <PortfolioPage />\n            </Route>\n            <Route exact path=\"/contact\">\n              <ContactPage />\n            </Route>\n          </Switch>\n          <Footer />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}